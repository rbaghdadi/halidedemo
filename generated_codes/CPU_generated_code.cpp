let bilateral_grid.s0.y.max = max(max((min((f5.min.1 + f5.extent.1), p1) + -1), min((f5.min.1 + f5.extent.1), (p1 + -1))), 0)
let bilateral_grid.s0.y.min = max(min(min((min(f5.min.1, p1) + -1), min(f5.min.1, (p1 + -1))), min((f5.min.1 + 1), (p1 + -1))), 0)
let bilateral_grid.s0.x.max = max(max(max((min((f5.min.0 + f5.extent.0), p2) + -1), min((f5.min.0 + f5.extent.0), (p2 + -1))), (min(((f5.min.0 + f5.extent.0) + -1), p2) + -1)), 0)
let bilateral_grid.s0.x.min = (let t56 = min(f5.min.0, p2) in max(min(min(min((t56 + -1), min(f5.min.0, (p2 + -1))), min((f5.min.0 + 1), (p2 + -1))), (t56 + -1)), 0))
let p0.extent.0.required.s = (max(max(min((((bilateral_grid.s0.x.max/8)*8) + 27), (p2 + -1)), min((((((bilateral_grid.s0.x.max - bilateral_grid.s0.x.min)/8)*8) + bilateral_grid.s0.x.min) + 7), bilateral_grid.s0.x.max)), 0) - min(max(min((((bilateral_grid.s0.x.min/8)*8) + -20), (p2 + -1)), 0), min(bilateral_grid.s0.x.min, (bilateral_grid.s0.x.max + -7))))
let p0.min.0.required = min(max(min((((bilateral_grid.s0.x.min/8)*8) + -20), (p2 + -1)), 0), min(bilateral_grid.s0.x.min, (bilateral_grid.s0.x.max + -7)))
let p0.extent.1.required.s = (max(max(min((((bilateral_grid.s0.y.max/8)*8) + 27), (p1 + -1)), bilateral_grid.s0.y.max), 0) - min(max(min((((bilateral_grid.s0.y.min/8)*8) + -20), (p1 + -1)), 0), bilateral_grid.s0.y.min))
let p0.min.1.required = min(max(min((((bilateral_grid.s0.y.min/8)*8) + -20), (p1 + -1)), 0), bilateral_grid.s0.y.min)
if (f5.host_and_dev_are_null) {
  rewrite_buffer(f5.buffer, 1, f5.min.0, f5.extent.0, 1, f5.min.1, f5.extent.1, f5.extent.0)
}
if (p0.host_and_dev_are_null) {
  rewrite_buffer(p0.buffer, 1, p0.min.0.required, (p0.extent.0.required.s + 1), 1, p0.min.1.required, (p0.extent.1.required.s + 1), (p0.extent.0.required.s + 1))
}
if (!(f5.host_and_dev_are_null || p0.host_and_dev_are_null)) {
  assert((f5.elem_size == 1), halide_error_bad_elem_size("Output buffer f5", "uint8", f5.elem_size, 1))
  assert((p0.elem_size == 1), halide_error_bad_elem_size("Input buffer p0", "uint8", p0.elem_size, 1))
  assert(((p0.min.0 <= p0.min.0.required) && ((((p0.min.0.required + p0.extent.0.required.s) - p0.extent.0) + 1) <= p0.min.0)), halide_error_access_out_of_bounds("Input buffer p0", 0, p0.min.0.required, (p0.min.0.required + p0.extent.0.required.s), p0.min.0, ((p0.min.0 + p0.extent.0) + -1)))
  assert(((p0.min.1 <= p0.min.1.required) && ((((p0.min.1.required + p0.extent.1.required.s) - p0.extent.1) + 1) <= p0.min.1)), halide_error_access_out_of_bounds("Input buffer p0", 1, p0.min.1.required, (p0.min.1.required + p0.extent.1.required.s), p0.min.1, ((p0.min.1 + p0.extent.1) + -1)))
  assert((f5.stride.0 == 1), halide_error_constraint_violated("f5.stride.0", f5.stride.0, "1", 1))
  assert((p0.stride.0 == 1), halide_error_constraint_violated("p0.stride.0", p0.stride.0, "1", 1))
  let f5.total_extent.1 = (int64(f5.extent.1)*int64(f5.extent.0))
  let p0.total_extent.1 = (int64(p0.extent.1)*int64(p0.extent.0))
  assert((int64(f5.extent.0) <= (int64)2147483647), halide_error_buffer_allocation_too_large("f5", int64(f5.extent.0), (int64)2147483647))
  assert(((int64(f5.extent.1)*int64(f5.stride.1)) <= (int64)2147483647), halide_error_buffer_allocation_too_large("f5", (int64(f5.extent.1)*int64(f5.stride.1)), (int64)2147483647))
  assert((f5.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("f5", f5.total_extent.1, (int64)2147483647))
  assert((int64(p0.extent.0) <= (int64)2147483647), halide_error_buffer_allocation_too_large("p0", int64(p0.extent.0), (int64)2147483647))
  assert(((int64(p0.extent.1)*int64(p0.stride.1)) <= (int64)2147483647), halide_error_buffer_allocation_too_large("p0", (int64(p0.extent.1)*int64(p0.stride.1)), (int64)2147483647))
  assert((p0.total_extent.1 <= (int64)2147483647), halide_error_buffer_extents_too_large("p0", p0.total_extent.1, (int64)2147483647))
  let blurz.y.extent_realized.s = ((bilateral_grid.s0.y.max/8) - (bilateral_grid.s0.y.min/8))
  let blurz.x.min_realized = min((min((bilateral_grid.s0.x.min/8), ((bilateral_grid.s0.x.max/8) + -6)) + -2), min(((bilateral_grid.s0.x.min/8) + -2), ((bilateral_grid.s0.x.max/8) + -4)))
  let blurz.x.extent_realized.s.s = (let t57 = ((bilateral_grid.s0.x.max/8) - (bilateral_grid.s0.x.min/8)) in max((min((((((t57 + 1)/8)*8) + (bilateral_grid.s0.x.min/8)) + 7), ((bilateral_grid.s0.x.max/8) + 1)) + 2), min((((((t57 + 5)/8)*8) + (bilateral_grid.s0.x.min/8)) + 5), ((bilateral_grid.s0.x.max/8) + 3))))
  let blurz.stride.2 = (((blurz.x.extent_realized.s.s - blurz.x.min_realized) + 1)*(blurz.y.extent_realized.s + 6))
  allocate blurz[float32 * ((blurz.x.extent_realized.s.s - blurz.x.min_realized) + 1) * (blurz.y.extent_realized.s + 6) * 12 * 2]
  produce blurz {
    let blurz.s0.x.x.loop_extent.s = ((bilateral_grid.s0.x.max/8) - (bilateral_grid.s0.x.min/8))
    parallel (blurz.s0.y, ((bilateral_grid.s0.y.min/8) + -2), (blurz.y.extent_realized.s + 6)) {
      let blurz.s0.x.min_1 = min(((bilateral_grid.s0.x.min/8) + -2), ((bilateral_grid.s0.x.max/8) + -4))
      let blurz.s0.x.max_1 = min((((((blurz.s0.x.x.loop_extent.s + 13)/8)*8) + (bilateral_grid.s0.x.min/8)) + -3), ((bilateral_grid.s0.x.max/8) + 3))
      allocate histogram[float32 * ((blurz.s0.x.max_1 - blurz.s0.x.min_1) + 1) * 1 * 16 * 2]
      produce histogram {
        for (histogram.s0.c, 0, 2) {
          for (histogram.s0.z, -2, 16) {
            for (histogram.s0.x, blurz.s0.x.min_1, ((blurz.s0.x.max_1 - blurz.s0.x.min_1) + 1)) {
              histogram[(((histogram.s0.x - blurz.s0.x.min_1) + ((histogram.s0.z + 2)*((blurz.s0.x.max_1 - blurz.s0.x.min_1) + 1))) + (histogram.s0.c*(((blurz.s0.x.max_1 - blurz.s0.x.min_1)*16) + 16)))] = 0.000000f
            }
          }
        }
      } update histogram {
        for (histogram.s1.x, blurz.s0.x.min_1, ((blurz.s0.x.max_1 - blurz.s0.x.min_1) + 1)) {
          for (histogram.s1.r4.y$r, 0, 8) {
            for (histogram.s1.r4.x$r, 0, 8) {
              histogram[((histogram.s1.x - blurz.s0.x.min_1) + ((int32(((max(min((float32(p0[((max(min((((histogram.s1.x*8) + histogram.s1.r4.x$r) + -4), (p2 + -1)), 0) + (max(min((((blurz.s0.y*8) + histogram.s1.r4.y$r) + -4), (p1 + -1)), 0)*p0.stride.1)) - (p0.min.0 + (p0.min.1*p0.stride.1)))])*0.003922f), 1.000000f), 0.000000f)*10.000000f) + 0.500000f)) + 2)*((blurz.s0.x.max_1 - blurz.s0.x.min_1) + 1)))] = (let t59 = max(min((float32(p0[((max(min((((histogram.s1.x*8) + histogram.s1.r4.x$r) + -4), (p2 + -1)), 0) + (max(min((((blurz.s0.y*8) + histogram.s1.r4.y$r) + -4), (p1 + -1)), 0)*p0.stride.1)) - (p0.min.0 + (p0.min.1*p0.stride.1)))])*0.003922f), 1.000000f), 0.000000f) in (histogram[((histogram.s1.x - blurz.s0.x.min_1) + ((int32(((t59*10.000000f) + 0.500000f)) + 2)*((blurz.s0.x.max_1 - blurz.s0.x.min_1) + 1)))] + t59))
              histogram[((((histogram.s1.x - blurz.s0.x.min_1) + ((int32(((max(min((float32(p0[((max(min((((histogram.s1.x*8) + histogram.s1.r4.x$r) + -4), (p2 + -1)), 0) + (max(min((((blurz.s0.y*8) + histogram.s1.r4.y$r) + -4), (p1 + -1)), 0)*p0.stride.1)) - (p0.min.0 + (p0.min.1*p0.stride.1)))])*0.003922f), 1.000000f), 0.000000f)*10.000000f) + 0.500000f)) + 2)*((blurz.s0.x.max_1 - blurz.s0.x.min_1) + 1))) + ((blurz.s0.x.max_1 - blurz.s0.x.min_1)*16)) + 16)] = (histogram[((((histogram.s1.x - blurz.s0.x.min_1) + ((int32(((max(min((float32(p0[((max(min((((histogram.s1.x*8) + histogram.s1.r4.x$r) + -4), (p2 + -1)), 0) + (max(min((((blurz.s0.y*8) + histogram.s1.r4.y$r) + -4), (p1 + -1)), 0)*p0.stride.1)) - (p0.min.0 + (p0.min.1*p0.stride.1)))])*0.003922f), 1.000000f), 0.000000f)*10.000000f) + 0.500000f)) + 2)*((blurz.s0.x.max_1 - blurz.s0.x.min_1) + 1))) + ((blurz.s0.x.max_1 - blurz.s0.x.min_1)*16)) + 16)] + 1.000000f)
            }
          }
        }
      }
      for (blurz.s0.x.x, 0, ((blurz.s0.x.x.loop_extent.s + 13)/8)) {
        let blurz.s0.x.v0.base = min((((blurz.s0.x.x*8) + (bilateral_grid.s0.x.min/8)) + -2), ((bilateral_grid.s0.x.max/8) + -4))
        for (blurz.s0.z, 0, 12) {
          blurz[ramp((((blurz.s0.x.v0.base - blurz.x.min_realized) + (((blurz.s0.y - (bilateral_grid.s0.y.min/8)) + 2)*((blurz.x.extent_realized.s.s - blurz.x.min_realized) + 1))) + (blurz.s0.z*blurz.stride.2)), 1, 8)] = ((((histogram[ramp(((blurz.s0.x.v0.base - blurz.s0.x.min_1) + (blurz.s0.z*((blurz.s0.x.max_1 - blurz.s0.x.min_1) + 1))), 1, 8)] + (histogram[ramp(((blurz.s0.x.v0.base - blurz.s0.x.min_1) + ((blurz.s0.z + 1)*((blurz.s0.x.max_1 - blurz.s0.x.min_1) + 1))), 1, 8)]*x8(4.000000f))) + (histogram[ramp(((blurz.s0.x.v0.base - blurz.s0.x.min_1) + ((blurz.s0.z + 2)*((blurz.s0.x.max_1 - blurz.s0.x.min_1) + 1))), 1, 8)]*x8(6.000000f))) + (histogram[ramp(((blurz.s0.x.v0.base - blurz.s0.x.min_1) + ((blurz.s0.z + 3)*((blurz.s0.x.max_1 - blurz.s0.x.min_1) + 1))), 1, 8)]*x8(4.000000f))) + histogram[ramp(((blurz.s0.x.v0.base - blurz.s0.x.min_1) + ((blurz.s0.z + 4)*((blurz.s0.x.max_1 - blurz.s0.x.min_1) + 1))), 1, 8)])
          blurz[ramp(((((blurz.s0.x.v0.base - blurz.x.min_realized) + (((blurz.s0.y - (bilateral_grid.s0.y.min/8)) + 2)*((blurz.x.extent_realized.s.s - blurz.x.min_realized) + 1))) + (blurz.s0.z*blurz.stride.2)) + (blurz.stride.2*12)), 1, 8)] = ((((histogram[ramp(((((blurz.s0.x.v0.base - blurz.s0.x.min_1) + (blurz.s0.z*((blurz.s0.x.max_1 - blurz.s0.x.min_1) + 1))) + ((blurz.s0.x.max_1 - blurz.s0.x.min_1)*16)) + 16), 1, 8)] + (histogram[ramp(((((blurz.s0.x.v0.base - blurz.s0.x.min_1) + ((blurz.s0.z + 1)*((blurz.s0.x.max_1 - blurz.s0.x.min_1) + 1))) + ((blurz.s0.x.max_1 - blurz.s0.x.min_1)*16)) + 16), 1, 8)]*x8(4.000000f))) + (histogram[ramp(((((blurz.s0.x.v0.base - blurz.s0.x.min_1) + ((blurz.s0.z + 2)*((blurz.s0.x.max_1 - blurz.s0.x.min_1) + 1))) + ((blurz.s0.x.max_1 - blurz.s0.x.min_1)*16)) + 16), 1, 8)]*x8(6.000000f))) + (histogram[ramp(((((blurz.s0.x.v0.base - blurz.s0.x.min_1) + ((blurz.s0.z + 3)*((blurz.s0.x.max_1 - blurz.s0.x.min_1) + 1))) + ((blurz.s0.x.max_1 - blurz.s0.x.min_1)*16)) + 16), 1, 8)]*x8(4.000000f))) + histogram[ramp(((((blurz.s0.x.v0.base - blurz.s0.x.min_1) + ((blurz.s0.z + 4)*((blurz.s0.x.max_1 - blurz.s0.x.min_1) + 1))) + ((blurz.s0.x.max_1 - blurz.s0.x.min_1)*16)) + 16), 1, 8)])
        }
      }
      free histogram
    }
  }
  let blurx.x.min_realized = min((bilateral_grid.s0.x.min/8), ((bilateral_grid.s0.x.max/8) + -6))
  let blurx.x.extent_realized.s.s = min((((((((bilateral_grid.s0.x.max/8) - (bilateral_grid.s0.x.min/8)) + 1)/8)*8) + (bilateral_grid.s0.x.min/8)) + 7), ((bilateral_grid.s0.x.max/8) + 1))
  let blurx.stride.2 = (((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1)*(blurz.y.extent_realized.s + 6))
  allocate blurx[float32 * ((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1) * (blurz.y.extent_realized.s + 6) * 12 * 2]
  produce blurx {
    let blurx.s0.x.x.loop_extent.s = ((bilateral_grid.s0.x.max/8) - (bilateral_grid.s0.x.min/8))
    parallel (blurx.s0.z, 0, 12) {
      for (blurx.s0.y, ((bilateral_grid.s0.y.min/8) + -2), (blurz.y.extent_realized.s + 6)) {
        let blurx.s0.x.x.epilogue.s = min((((bilateral_grid.s0.x.max/8) - (bilateral_grid.s0.x.min/8)) + -6), (blurx.s0.x.x.loop_extent.s + 1))
        for (blurx.s0.x.x, 0, ((blurx.s0.x.x.epilogue.s/8) + 1)) {
          let blurx.s0.x.v3.base = ((blurx.s0.x.x*8) + (bilateral_grid.s0.x.min/8))
          blurx[ramp((((blurx.s0.x.v3.base - blurx.x.min_realized) + (((blurx.s0.y - (bilateral_grid.s0.y.min/8)) + 2)*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blurx.s0.z*blurx.stride.2)), 1, 8)] = (let t66 = (((blurx.s0.x.v3.base - blurz.x.min_realized) + (((blurx.s0.y - (bilateral_grid.s0.y.min/8)) + 2)*((blurz.x.extent_realized.s.s - blurz.x.min_realized) + 1))) + (blurx.s0.z*blurz.stride.2)) in ((((blurz[ramp((t66 + -2), 1, 8)] + (blurz[ramp((t66 + -1), 1, 8)]*x8(4.000000f))) + (blurz[ramp(t66, 1, 8)]*x8(6.000000f))) + (blurz[ramp((t66 + 1), 1, 8)]*x8(4.000000f))) + blurz[ramp((t66 + 2), 1, 8)]))
          blurx[ramp(((((blurx.s0.x.v3.base - blurx.x.min_realized) + (((blurx.s0.y - (bilateral_grid.s0.y.min/8)) + 2)*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blurx.s0.z*blurx.stride.2)) + (blurx.stride.2*12)), 1, 8)] = (let t67 = ((((blurx.s0.x.v3.base - blurz.x.min_realized) + (((blurx.s0.y - (bilateral_grid.s0.y.min/8)) + 2)*((blurz.x.extent_realized.s.s - blurz.x.min_realized) + 1))) + (blurx.s0.z*blurz.stride.2)) + (blurz.stride.2*12)) in ((((blurz[ramp((t67 + -2), 1, 8)] + (blurz[ramp((t67 + -1), 1, 8)]*x8(4.000000f))) + (blurz[ramp(t67, 1, 8)]*x8(6.000000f))) + (blurz[ramp((t67 + 1), 1, 8)]*x8(4.000000f))) + blurz[ramp((t67 + 2), 1, 8)]))
        }
        for (blurx.s0.x.x, ((blurx.s0.x.x.epilogue.s/8) + 1), ((((blurx.s0.x.x.loop_extent.s + 9)/8) - (blurx.s0.x.x.epilogue.s/8)) + -1)) {
          blurx[ramp((((((bilateral_grid.s0.x.max/8) - blurx.x.min_realized) + (((blurx.s0.y - (bilateral_grid.s0.y.min/8)) + 2)*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blurx.s0.z*blurx.stride.2)) + -6), 1, 8)] = (let t68 = ((((bilateral_grid.s0.x.max/8) - blurz.x.min_realized) + (((blurx.s0.y - (bilateral_grid.s0.y.min/8)) + 2)*((blurz.x.extent_realized.s.s - blurz.x.min_realized) + 1))) + (blurx.s0.z*blurz.stride.2)) in ((((blurz[ramp((t68 + -8), 1, 8)] + (blurz[ramp((t68 + -7), 1, 8)]*x8(4.000000f))) + (blurz[ramp((t68 + -6), 1, 8)]*x8(6.000000f))) + (blurz[ramp((t68 + -5), 1, 8)]*x8(4.000000f))) + blurz[ramp((t68 + -4), 1, 8)]))
          blurx[ramp(((((((bilateral_grid.s0.x.max/8) - blurx.x.min_realized) + (((blurx.s0.y - (bilateral_grid.s0.y.min/8)) + 2)*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blurx.s0.z*blurx.stride.2)) + (blurx.stride.2*12)) + -6), 1, 8)] = (let t69 = (((((bilateral_grid.s0.x.max/8) - blurz.x.min_realized) + (((blurx.s0.y - (bilateral_grid.s0.y.min/8)) + 2)*((blurz.x.extent_realized.s.s - blurz.x.min_realized) + 1))) + (blurx.s0.z*blurz.stride.2)) + (blurz.stride.2*12)) in ((((blurz[ramp((t69 + -8), 1, 8)] + (blurz[ramp((t69 + -7), 1, 8)]*x8(4.000000f))) + (blurz[ramp((t69 + -6), 1, 8)]*x8(6.000000f))) + (blurz[ramp((t69 + -5), 1, 8)]*x8(4.000000f))) + blurz[ramp((t69 + -4), 1, 8)]))
        }
      }
    }
    free blurz
  }
  let blury.x.min_realized = min((min(bilateral_grid.s0.x.min, (bilateral_grid.s0.x.max + -7))/8), blurx.x.min_realized)
  let blury.x.extent_realized.s = (max(((min((((((bilateral_grid.s0.x.max - bilateral_grid.s0.x.min)/8)*8) + bilateral_grid.s0.x.min) + 7), bilateral_grid.s0.x.max)/8) + 1), min((((((((bilateral_grid.s0.x.max/8) - (bilateral_grid.s0.x.min/8)) + 1)/8)*8) + (bilateral_grid.s0.x.min/8)) + 7), ((bilateral_grid.s0.x.max/8) + 1))) - min((min(bilateral_grid.s0.x.min, (bilateral_grid.s0.x.max + -7))/8), blurx.x.min_realized))
  let blury.stride.2 = ((blury.x.extent_realized.s + 1)*(blurz.y.extent_realized.s + 2))
  allocate blury[float32 * (blury.x.extent_realized.s + 1) * (blurz.y.extent_realized.s + 2) * 12 * 2]
  produce blury {
    let blury.s0.x.x.loop_extent.s = ((bilateral_grid.s0.x.max/8) - (bilateral_grid.s0.x.min/8))
    parallel (blury.s0.z, 0, 12) {
      for (blury.s0.y, (bilateral_grid.s0.y.min/8), (blurz.y.extent_realized.s + 2)) {
        let blury.s0.x.x.epilogue.s = min((((bilateral_grid.s0.x.max/8) - (bilateral_grid.s0.x.min/8)) + -6), (blury.s0.x.x.loop_extent.s + 1))
        for (blury.s0.x.x, 0, ((blury.s0.x.x.epilogue.s/8) + 1)) {
          let blury.s0.x.v4.base = ((blury.s0.x.x*8) + (bilateral_grid.s0.x.min/8))
          blury[ramp((((blury.s0.x.v4.base - blury.x.min_realized) + ((blury.s0.y - (bilateral_grid.s0.y.min/8))*(blury.x.extent_realized.s + 1))) + (blury.s0.z*blury.stride.2)), 1, 8)] = (let t71 = (blury.s0.y - (bilateral_grid.s0.y.min/8)) in ((((blurx[ramp((((blury.s0.x.v4.base - blurx.x.min_realized) + (t71*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blury.s0.z*blurx.stride.2)), 1, 8)] + (blurx[ramp((((blury.s0.x.v4.base - blurx.x.min_realized) + ((t71 + 1)*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blury.s0.z*blurx.stride.2)), 1, 8)]*x8(4.000000f))) + (blurx[ramp((((blury.s0.x.v4.base - blurx.x.min_realized) + ((t71 + 2)*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blury.s0.z*blurx.stride.2)), 1, 8)]*x8(6.000000f))) + (blurx[ramp((((blury.s0.x.v4.base - blurx.x.min_realized) + ((t71 + 3)*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blury.s0.z*blurx.stride.2)), 1, 8)]*x8(4.000000f))) + blurx[ramp((((blury.s0.x.v4.base - blurx.x.min_realized) + ((t71 + 4)*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blury.s0.z*blurx.stride.2)), 1, 8)]))
          blury[ramp(((((blury.s0.x.v4.base - blury.x.min_realized) + ((blury.s0.y - (bilateral_grid.s0.y.min/8))*(blury.x.extent_realized.s + 1))) + (blury.s0.z*blury.stride.2)) + (blury.stride.2*12)), 1, 8)] = (let t75 = (blury.s0.y - (bilateral_grid.s0.y.min/8)) in ((((blurx[ramp(((((blury.s0.x.v4.base - blurx.x.min_realized) + (t75*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blury.s0.z*blurx.stride.2)) + (blurx.stride.2*12)), 1, 8)] + (blurx[ramp(((((blury.s0.x.v4.base - blurx.x.min_realized) + ((t75 + 1)*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blury.s0.z*blurx.stride.2)) + (blurx.stride.2*12)), 1, 8)]*x8(4.000000f))) + (blurx[ramp(((((blury.s0.x.v4.base - blurx.x.min_realized) + ((t75 + 2)*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blury.s0.z*blurx.stride.2)) + (blurx.stride.2*12)), 1, 8)]*x8(6.000000f))) + (blurx[ramp(((((blury.s0.x.v4.base - blurx.x.min_realized) + ((t75 + 3)*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blury.s0.z*blurx.stride.2)) + (blurx.stride.2*12)), 1, 8)]*x8(4.000000f))) + blurx[ramp(((((blury.s0.x.v4.base - blurx.x.min_realized) + ((t75 + 4)*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blury.s0.z*blurx.stride.2)) + (blurx.stride.2*12)), 1, 8)]))
        }
        for (blury.s0.x.x, ((blury.s0.x.x.epilogue.s/8) + 1), ((((blury.s0.x.x.loop_extent.s + 9)/8) - (blury.s0.x.x.epilogue.s/8)) + -1)) {
          blury[ramp((((((bilateral_grid.s0.x.max/8) - blury.x.min_realized) + ((blury.s0.y - (bilateral_grid.s0.y.min/8))*(blury.x.extent_realized.s + 1))) + (blury.s0.z*blury.stride.2)) + -6), 1, 8)] = (let t79 = (blury.s0.y - (bilateral_grid.s0.y.min/8)) in ((((blurx[ramp((((((bilateral_grid.s0.x.max/8) - blurx.x.min_realized) + (t79*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blury.s0.z*blurx.stride.2)) + -6), 1, 8)] + (blurx[ramp((((((bilateral_grid.s0.x.max/8) - blurx.x.min_realized) + ((t79 + 1)*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blury.s0.z*blurx.stride.2)) + -6), 1, 8)]*x8(4.000000f))) + (blurx[ramp((((((bilateral_grid.s0.x.max/8) - blurx.x.min_realized) + ((t79 + 2)*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blury.s0.z*blurx.stride.2)) + -6), 1, 8)]*x8(6.000000f))) + (blurx[ramp((((((bilateral_grid.s0.x.max/8) - blurx.x.min_realized) + ((t79 + 3)*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blury.s0.z*blurx.stride.2)) + -6), 1, 8)]*x8(4.000000f))) + blurx[ramp((((((bilateral_grid.s0.x.max/8) - blurx.x.min_realized) + ((t79 + 4)*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blury.s0.z*blurx.stride.2)) + -6), 1, 8)]))
          blury[ramp(((((((bilateral_grid.s0.x.max/8) - blury.x.min_realized) + ((blury.s0.y - (bilateral_grid.s0.y.min/8))*(blury.x.extent_realized.s + 1))) + (blury.s0.z*blury.stride.2)) + (blury.stride.2*12)) + -6), 1, 8)] = (let t83 = (blury.s0.y - (bilateral_grid.s0.y.min/8)) in ((((blurx[ramp(((((((bilateral_grid.s0.x.max/8) - blurx.x.min_realized) + (t83*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blury.s0.z*blurx.stride.2)) + (blurx.stride.2*12)) + -6), 1, 8)] + (blurx[ramp(((((((bilateral_grid.s0.x.max/8) - blurx.x.min_realized) + ((t83 + 1)*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blury.s0.z*blurx.stride.2)) + (blurx.stride.2*12)) + -6), 1, 8)]*x8(4.000000f))) + (blurx[ramp(((((((bilateral_grid.s0.x.max/8) - blurx.x.min_realized) + ((t83 + 2)*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blury.s0.z*blurx.stride.2)) + (blurx.stride.2*12)) + -6), 1, 8)]*x8(6.000000f))) + (blurx[ramp(((((((bilateral_grid.s0.x.max/8) - blurx.x.min_realized) + ((t83 + 3)*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blury.s0.z*blurx.stride.2)) + (blurx.stride.2*12)) + -6), 1, 8)]*x8(4.000000f))) + blurx[ramp(((((((bilateral_grid.s0.x.max/8) - blurx.x.min_realized) + ((t83 + 4)*((blurx.x.extent_realized.s.s - blurx.x.min_realized) + 1))) + (blury.s0.z*blurx.stride.2)) + (blurx.stride.2*12)) + -6), 1, 8)]))
        }
      }
    }
    free blurx
  }
  let bilateral_grid.y.min_realized = (let t86 = min(f5.min.1, p1) in min(max(min(min(min((t86 + -1), min(f5.min.1, (p1 + -1))), min((f5.min.1 + 1), (p1 + -1))), (t86 + -1)), 0), bilateral_grid.s0.y.min))
  let bilateral_grid.y.extent_realized.s.s = max(max(max(max((min((f5.min.1 + f5.extent.1), p1) + -1), min((f5.min.1 + f5.extent.1), (p1 + -1))), (min(((f5.min.1 + f5.extent.1) + -1), p1) + -1)), bilateral_grid.s0.y.max), 0)
  let bilateral_grid.x.min_realized = (let t88 = min(f5.min.0, ((f5.min.0 + f5.extent.0) + -8)) in (let t89 = min(t88, p2) in min(max(min(min(min((t89 + -1), min((t88 + 1), (p2 + -1))), min(t88, (p2 + -1))), (t89 + -1)), 0), min(bilateral_grid.s0.x.min, (bilateral_grid.s0.x.max + -7)))))
  let bilateral_grid.x.extent_realized.s.s = (let t92 = min((((((f5.extent.0 + -1)/8)*8) + f5.min.0) + 7), ((f5.min.0 + f5.extent.0) + -1)) in (let t93 = min(t92, p2) in max(max(max(max(max((t93 + -1), min(min((((((f5.extent.0 + -1)/8)*8) + f5.min.0) + 8), (f5.min.0 + f5.extent.0)), (p2 + -1))), min(t92, (p2 + -1))), (t93 + -1)), min((((((bilateral_grid.s0.x.max - bilateral_grid.s0.x.min)/8)*8) + bilateral_grid.s0.x.min) + 7), bilateral_grid.s0.x.max)), 0)))
  allocate bilateral_grid[float32 * ((bilateral_grid.x.extent_realized.s.s - bilateral_grid.x.min_realized) + 1) * ((bilateral_grid.y.extent_realized.s.s - bilateral_grid.y.min_realized) + 1)]
  produce bilateral_grid {
    parallel (bilateral_grid.s0.y, bilateral_grid.s0.y.min, ((bilateral_grid.s0.y.max - bilateral_grid.s0.y.min) + 1)) {
      for (bilateral_grid.s0.x.x, 0, (((bilateral_grid.s0.x.max - bilateral_grid.s0.x.min) + 1)/8)) {
        bilateral_grid[ramp(((((bilateral_grid.s0.x.x*8) + bilateral_grid.s0.x.min) - bilateral_grid.x.min_realized) + ((bilateral_grid.s0.y - bilateral_grid.y.min_realized)*((bilateral_grid.x.extent_realized.s.s - bilateral_grid.x.min_realized) + 1))), 1, 8)] = (let t95 = max(min((float32x8(p0[ramp(((((bilateral_grid.s0.x.x*8) + bilateral_grid.s0.x.min) + (bilateral_grid.s0.y*p0.stride.1)) - (p0.min.0 + (p0.min.1*p0.stride.1))), 1, 8)])*x8(0.003922f)), x8(1.000000f)), x8(0.000000f)) in (let t96 = float32x8((ramp(((bilateral_grid.s0.x.x*8) + bilateral_grid.s0.x.min), 1, 8) % x8(8))) in (let t97 = float32((bilateral_grid.s0.y % 8)) in (let t98 = ((t95*x8(10.000000f)) - float32x8(int32x8((t95*x8(10.000000f))))) in (let t99 = ((ramp(((bilateral_grid.s0.x.x*8) + bilateral_grid.s0.x.min), 1, 8)/x8(8)) - x8(blury.x.min_realized)) in (let t100 = ((bilateral_grid.s0.y/8) - (bilateral_grid.s0.y.min/8)) in (let t101 = (t99 + x8((t100*(blury.x.extent_realized.s + 1)))) in (let t102 = (int32x8((t95*x8(10.000000f)))*x8(blury.stride.2)) in (let t104 = (t99 + x8(((t100 + 1)*(blury.x.extent_realized.s + 1)))) in (let t106 = ((int32x8((t95*x8(10.000000f))) + x8(1))*x8(blury.stride.2)) in (let t109 = ((t101 + t102) + x8((blury.stride.2*12))) in (let t110 = ((t104 + t102) + x8((blury.stride.2*12))) in (let t111 = ((t101 + t106) + x8((blury.stride.2*12))) in (let t112 = ((t104 + t106) + x8((blury.stride.2*12))) in (lerp(lerp(lerp(blury[(t101 + t102)], blury[((t101 + t102) + x8(1))], (t96*x8(0.125000f))), lerp(blury[(t104 + t102)], blury[((t104 + t102) + x8(1))], (t96*x8(0.125000f))), x8((t97*0.125000f))), lerp(lerp(blury[(t101 + t106)], blury[((t101 + t106) + x8(1))], (t96*x8(0.125000f))), lerp(blury[(t104 + t106)], blury[((t104 + t106) + x8(1))], (t96*x8(0.125000f))), x8((t97*0.125000f))), t98)/lerp(lerp(lerp(blury[t109], blury[(t109 + x8(1))], (t96*x8(0.125000f))), lerp(blury[t110], blury[(t110 + x8(1))], (t96*x8(0.125000f))), x8((t97*0.125000f))), lerp(lerp(blury[t111], blury[(t111 + x8(1))], (t96*x8(0.125000f))), lerp(blury[t112], blury[(t112 + x8(1))], (t96*x8(0.125000f))), x8((t97*0.125000f))), t98))))))))))))))))
      }
      for (bilateral_grid.s0.x.x, (((bilateral_grid.s0.x.max - bilateral_grid.s0.x.min) + 1)/8), ((((bilateral_grid.s0.x.max - bilateral_grid.s0.x.min) + 8)/8) - (((bilateral_grid.s0.x.max - bilateral_grid.s0.x.min) + 1)/8))) {
        bilateral_grid[ramp((((bilateral_grid.s0.x.max - bilateral_grid.x.min_realized) + ((bilateral_grid.s0.y - bilateral_grid.y.min_realized)*((bilateral_grid.x.extent_realized.s.s - bilateral_grid.x.min_realized) + 1))) + -7), 1, 8)] = (let t114 = max(min((float32x8(p0[ramp((((bilateral_grid.s0.x.max + (bilateral_grid.s0.y*p0.stride.1)) - (p0.min.0 + (p0.min.1*p0.stride.1))) + -7), 1, 8)])*x8(0.003922f)), x8(1.000000f)), x8(0.000000f)) in (let t115 = float32x8((ramp((bilateral_grid.s0.x.max + -7), 1, 8) % x8(8))) in (let t116 = float32((bilateral_grid.s0.y % 8)) in (let t117 = ((t114*x8(10.000000f)) - float32x8(int32x8((t114*x8(10.000000f))))) in (let t118 = ((ramp((bilateral_grid.s0.x.max + -7), 1, 8)/x8(8)) - x8(blury.x.min_realized)) in (let t119 = ((bilateral_grid.s0.y/8) - (bilateral_grid.s0.y.min/8)) in (let t120 = (t118 + x8((t119*(blury.x.extent_realized.s + 1)))) in (let t121 = (int32x8((t114*x8(10.000000f)))*x8(blury.stride.2)) in (let t123 = (t118 + x8(((t119 + 1)*(blury.x.extent_realized.s + 1)))) in (let t125 = ((int32x8((t114*x8(10.000000f))) + x8(1))*x8(blury.stride.2)) in (let t128 = ((t120 + t121) + x8((blury.stride.2*12))) in (let t129 = ((t123 + t121) + x8((blury.stride.2*12))) in (let t130 = ((t120 + t125) + x8((blury.stride.2*12))) in (let t131 = ((t123 + t125) + x8((blury.stride.2*12))) in (lerp(lerp(lerp(blury[(t120 + t121)], blury[((t120 + t121) + x8(1))], (t115*x8(0.125000f))), lerp(blury[(t123 + t121)], blury[((t123 + t121) + x8(1))], (t115*x8(0.125000f))), x8((t116*0.125000f))), lerp(lerp(blury[(t120 + t125)], blury[((t120 + t125) + x8(1))], (t115*x8(0.125000f))), lerp(blury[(t123 + t125)], blury[((t123 + t125) + x8(1))], (t115*x8(0.125000f))), x8((t116*0.125000f))), t117)/lerp(lerp(lerp(blury[t128], blury[(t128 + x8(1))], (t115*x8(0.125000f))), lerp(blury[t129], blury[(t129 + x8(1))], (t115*x8(0.125000f))), x8((t116*0.125000f))), lerp(lerp(blury[t130], blury[(t130 + x8(1))], (t115*x8(0.125000f))), lerp(blury[t131], blury[(t131 + x8(1))], (t115*x8(0.125000f))), x8((t116*0.125000f))), t117))))))))))))))))
      }
    }
    free blury
  }
  produce f5 {
    parallel (f5.s0.y, f5.min.1, f5.extent.1) {
      let f3.x.min_realized = min(f5.min.0, ((f5.extent.0 + f5.min.0) + -8))
      let f3.x.extent_realized.s.s = max(((f5.extent.0 + f5.min.0) + -1), min((((((f5.extent.0 + -1)/8)*8) + f5.min.0) + 7), ((f5.extent.0 + f5.min.0) + -1)))
      allocate f3[float32 * ((f3.x.extent_realized.s.s - f3.x.min_realized) + 1) * 1]
      produce f3 {
        for (f3.s0.x.x, 0, (f5.extent.0/8)) {
          f3[ramp((((f3.s0.x.x*8) + f5.min.0) - f3.x.min_realized), 1, 8)] = (let t134 = (max(min(ramp((((f3.s0.x.x*8) + f5.min.0) + 1), 1, 8), x8((p2 + -1))), x8(0)) - x8(bilateral_grid.x.min_realized)) in (let t136.s = ((max((min(f5.s0.y, p1) + -1), 0) - bilateral_grid.y.min_realized)*((bilateral_grid.x.extent_realized.s.s - bilateral_grid.x.min_realized) + 1)) in (let t137 = (max((min(ramp(((f3.s0.x.x*8) + f5.min.0), 1, 8), x8(p2)) + x8(-1)), x8(0)) - x8(bilateral_grid.x.min_realized)) in (let t138.s = ((max(min(f5.s0.y, (p1 + -1)), 0) - bilateral_grid.y.min_realized)*((bilateral_grid.x.extent_realized.s.s - bilateral_grid.x.min_realized) + 1)) in (let t139.s = ((max(min((f5.s0.y + 1), (p1 + -1)), 0) - bilateral_grid.y.min_realized)*((bilateral_grid.x.extent_realized.s.s - bilateral_grid.x.min_realized) + 1)) in (((((bilateral_grid[(t134 + x8(t136.s))] - bilateral_grid[(t137 + x8(t136.s))]) - (bilateral_grid[(t137 + x8(t138.s))]*x8(2.000000f))) + (bilateral_grid[(t134 + x8(t138.s))]*x8(2.000000f))) - bilateral_grid[(t137 + x8(t139.s))]) + bilateral_grid[(t134 + x8(t139.s))]))))))
        }
        for (f3.s0.x.x, (f5.extent.0/8), (((f5.extent.0 + 7)/8) - (f5.extent.0/8))) {
          f3[ramp((((f5.extent.0 + f5.min.0) - f3.x.min_realized) + -8), 1, 8)] = (let t141 = (max(min(ramp(((f5.extent.0 + f5.min.0) + -7), 1, 8), x8((p2 + -1))), x8(0)) - x8(bilateral_grid.x.min_realized)) in (let t143.s = ((max((min(f5.s0.y, p1) + -1), 0) - bilateral_grid.y.min_realized)*((bilateral_grid.x.extent_realized.s.s - bilateral_grid.x.min_realized) + 1)) in (let t144 = (max((min(ramp(((f5.extent.0 + f5.min.0) + -8), 1, 8), x8(p2)) + x8(-1)), x8(0)) - x8(bilateral_grid.x.min_realized)) in (let t145.s = ((max(min(f5.s0.y, (p1 + -1)), 0) - bilateral_grid.y.min_realized)*((bilateral_grid.x.extent_realized.s.s - bilateral_grid.x.min_realized) + 1)) in (let t146.s = ((max(min((f5.s0.y + 1), (p1 + -1)), 0) - bilateral_grid.y.min_realized)*((bilateral_grid.x.extent_realized.s.s - bilateral_grid.x.min_realized) + 1)) in (((((bilateral_grid[(t141 + x8(t143.s))] - bilateral_grid[(t144 + x8(t143.s))]) - (bilateral_grid[(t144 + x8(t145.s))]*x8(2.000000f))) + (bilateral_grid[(t141 + x8(t145.s))]*x8(2.000000f))) - bilateral_grid[(t144 + x8(t146.s))]) + bilateral_grid[(t141 + x8(t146.s))]))))))
        }
      }
      allocate f4[float32 * ((f3.x.extent_realized.s.s - f3.x.min_realized) + 1) * 1]
      produce f4 {
        for (f4.s0.x.x, 0, (f5.extent.0/8)) {
          f4[ramp((((f4.s0.x.x*8) + f5.min.0) - f3.x.min_realized), 1, 8)] = (let t148 = (max((min(ramp(((f4.s0.x.x*8) + f5.min.0), 1, 8), x8(p2)) + x8(-1)), x8(0)) - x8(bilateral_grid.x.min_realized)) in (let t150.s = ((max((min(f5.s0.y, p1) + -1), 0) - bilateral_grid.y.min_realized)*((bilateral_grid.x.extent_realized.s.s - bilateral_grid.x.min_realized) + 1)) in (let t151 = (max(min(ramp(((f4.s0.x.x*8) + f5.min.0), 1, 8), x8((p2 + -1))), x8(0)) - x8(bilateral_grid.x.min_realized)) in (let t152 = (max(min(ramp((((f4.s0.x.x*8) + f5.min.0) + 1), 1, 8), x8((p2 + -1))), x8(0)) - x8(bilateral_grid.x.min_realized)) in (let t153.s = ((max(min((f5.s0.y + 1), (p1 + -1)), 0) - bilateral_grid.y.min_realized)*((bilateral_grid.x.extent_realized.s.s - bilateral_grid.x.min_realized) + 1)) in ((((((bilateral_grid[(t148 + x8(t150.s))]*x8(-1.000000f)) - (bilateral_grid[(t151 + x8(t150.s))]*x8(2.000000f))) - bilateral_grid[(t152 + x8(t150.s))]) + bilateral_grid[(t148 + x8(t153.s))]) + (bilateral_grid[(t151 + x8(t153.s))]*x8(2.000000f))) + bilateral_grid[(t152 + x8(t153.s))]))))))
        }
        for (f4.s0.x.x, (f5.extent.0/8), (((f5.extent.0 + 7)/8) - (f5.extent.0/8))) {
          f4[ramp((((f5.extent.0 + f5.min.0) - f3.x.min_realized) + -8), 1, 8)] = (let t155 = (max((min(ramp(((f5.extent.0 + f5.min.0) + -8), 1, 8), x8(p2)) + x8(-1)), x8(0)) - x8(bilateral_grid.x.min_realized)) in (let t157.s = ((max((min(f5.s0.y, p1) + -1), 0) - bilateral_grid.y.min_realized)*((bilateral_grid.x.extent_realized.s.s - bilateral_grid.x.min_realized) + 1)) in (let t158 = (max(min(ramp(((f5.extent.0 + f5.min.0) + -8), 1, 8), x8((p2 + -1))), x8(0)) - x8(bilateral_grid.x.min_realized)) in (let t159 = (max(min(ramp(((f5.extent.0 + f5.min.0) + -7), 1, 8), x8((p2 + -1))), x8(0)) - x8(bilateral_grid.x.min_realized)) in (let t160.s = ((max(min((f5.s0.y + 1), (p1 + -1)), 0) - bilateral_grid.y.min_realized)*((bilateral_grid.x.extent_realized.s.s - bilateral_grid.x.min_realized) + 1)) in ((((((bilateral_grid[(t155 + x8(t157.s))]*x8(-1.000000f)) - (bilateral_grid[(t158 + x8(t157.s))]*x8(2.000000f))) - bilateral_grid[(t159 + x8(t157.s))]) + bilateral_grid[(t155 + x8(t160.s))]) + (bilateral_grid[(t158 + x8(t160.s))]*x8(2.000000f))) + bilateral_grid[(t159 + x8(t160.s))]))))))
        }
      }
      for (f5.s0.x, f5.min.0, f5.extent.0) {
        f5[((f5.s0.x + (f5.s0.y*f5.stride.1)) - (f5.min.0 + (f5.min.1*f5.stride.1)))] = (let t162 = f3[(f5.s0.x - f3.x.min_realized)] in (let t163 = f4[(f5.s0.x - f3.x.min_realized)] in uint8((sqrt_f32(((t162*t162) + (t163*t163)))*255.000000f))))
      }
      free f3
      free f4
    }
    free bilateral_grid
  }
  0
}
